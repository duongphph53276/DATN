import { PermissionModel } from '../models/User/permission.js';
import { RolePermissionModel } from '../models/User/role_permission.js';
import connectDB from '../config/db.js';

const cleanupPermissions = async () => {
  try {
    await connectDB();
    console.log('üîç ƒêang ki·ªÉm tra permissions trong database...\n');

    // L·∫•y t·∫•t c·∫£ permissions
    const allPermissions = await PermissionModel.find().sort({ name: 1 });
    console.log(`üìä T·ªïng s·ªë permissions trong database: ${allPermissions.length}\n`);

    // Ki·ªÉm tra permissions tr√πng l·∫∑p
    const permissionNames = allPermissions.map(p => p.name);
    const duplicates = permissionNames.filter((name, index) => permissionNames.indexOf(name) !== index);
    const uniqueDuplicates = [...new Set(duplicates)];

    if (uniqueDuplicates.length > 0) {
      console.log('‚ö†Ô∏è  T√¨m th·∫•y permissions tr√πng l·∫∑p:');
      uniqueDuplicates.forEach(name => {
        const dupes = allPermissions.filter(p => p.name === name);
        console.log(`   - "${name}": ${dupes.length} b·∫£n sao`);
        dupes.forEach((p, i) => {
          console.log(`     ${i + 1}. ID: ${p._id}, Created: ${p.createdAt}`);
        });
      });
      console.log('');

      // X√≥a permissions tr√πng l·∫∑p (gi·ªØ l·∫°i b·∫£n ƒë·∫ßu ti√™n)
      for (const duplicateName of uniqueDuplicates) {
        const dupes = allPermissions.filter(p => p.name === duplicateName);
        const toKeep = dupes[0]; // Gi·ªØ l·∫°i b·∫£n ƒë·∫ßu ti√™n
        const toDelete = dupes.slice(1); // X√≥a c√°c b·∫£n c√≤n l·∫°i

        console.log(`üóëÔ∏è  ƒêang x√≥a ${toDelete.length} b·∫£n sao c·ªßa "${duplicateName}":`);
        
        for (const permission of toDelete) {
          // Ki·ªÉm tra xem permission n√†y c√≥ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong role_permissions kh√¥ng
          const rolePermissions = await RolePermissionModel.find({ permission_id: permission._id });
          
          if (rolePermissions.length > 0) {
            console.log(`   ‚ö†Ô∏è  Permission ID ${permission._id} ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong ${rolePermissions.length} role. Chuy·ªÉn sang permission g·ªëc...`);
            
            // Chuy·ªÉn t·∫•t c·∫£ role_permissions sang permission g·ªëc
            for (const rp of rolePermissions) {
              const existingRP = await RolePermissionModel.findOne({
                role_id: rp.role_id,
                permission_id: toKeep._id
              });
              
              if (!existingRP) {
                rp.permission_id = toKeep._id;
                await rp.save();
              } else {
                // N·∫øu ƒë√£ t·ªìn t·∫°i, x√≥a b·∫£n tr√πng l·∫∑p
                await RolePermissionModel.findByIdAndDelete(rp._id);
              }
            }
          }
          
          // X√≥a permission tr√πng l·∫∑p
          await PermissionModel.findByIdAndDelete(permission._id);
          console.log(`   ‚úÖ ƒê√£ x√≥a permission ID: ${permission._id}`);
        }
      }
    } else {
      console.log('‚úÖ Kh√¥ng t√¨m th·∫•y permissions tr√πng l·∫∑p!');
    }

    // Ki·ªÉm tra permissions kh√¥ng h·ª£p l·ªá (null ho·∫∑c empty name)
    const invalidPermissions = allPermissions.filter(p => !p.name || p.name.trim() === '');
    if (invalidPermissions.length > 0) {
      console.log(`\n‚ö†Ô∏è  T√¨m th·∫•y ${invalidPermissions.length} permissions kh√¥ng h·ª£p l·ªá:`);
      invalidPermissions.forEach(p => {
        console.log(`   - ID: ${p._id}, Name: "${p.name}"`);
      });
      
      // X√≥a permissions kh√¥ng h·ª£p l·ªá
      for (const permission of invalidPermissions) {
        await RolePermissionModel.deleteMany({ permission_id: permission._id });
        await PermissionModel.findByIdAndDelete(permission._id);
        console.log(`   ‚úÖ ƒê√£ x√≥a permission kh√¥ng h·ª£p l·ªá ID: ${permission._id}`);
      }
    }

    // Hi·ªÉn th·ªã danh s√°ch permissions cu·ªëi c√πng
    const finalPermissions = await PermissionModel.find().sort({ name: 1 });
    console.log(`\nüìã Danh s√°ch permissions sau khi d·ªçn d·∫πp (${finalPermissions.length} permissions):`);
    finalPermissions.forEach((p, index) => {
      console.log(`   ${index + 1}. ${p.name} - ${p.description}`);
    });

    console.log('\n‚úÖ Ho√†n th√†nh d·ªçn d·∫πp permissions!');

  } catch (error) {
    console.error('‚ùå L·ªói khi d·ªçn d·∫πp permissions:', error);
  } finally {
    process.exit(0);
  }
};

cleanupPermissions();
