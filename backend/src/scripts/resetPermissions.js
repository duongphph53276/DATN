import dotenv from 'dotenv';
import connectDB from '../config/db.js';
import { PermissionModel } from '../models/User/permission.js';
import { RolePermissionModel } from '../models/User/role_permission.js';
import { defaultPermissions } from '../data/permissions.js';

// Load environment variables
dotenv.config();

const resetPermissions = async () => {
  try {
    console.log('üîÑ B·∫Øt ƒë·∫ßu reset permissions...');
    
    // K·∫øt n·ªëi database
    await connectDB();
    
    // X√≥a t·∫•t c·∫£ role_permissions tr∆∞·ªõc
    console.log('üóëÔ∏è X√≥a t·∫•t c·∫£ role_permissions...');
    await RolePermissionModel.deleteMany({});
    console.log('‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ role_permissions');
    
    // X√≥a t·∫•t c·∫£ permissions c≈©
    console.log('üóëÔ∏è X√≥a t·∫•t c·∫£ permissions c≈©...');
    await PermissionModel.deleteMany({});
    console.log('‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ permissions c≈©');
    
    // T·∫°o l·∫°i permissions m·ªõi
    console.log('üÜï T·∫°o permissions m·ªõi...');
    for (const permission of defaultPermissions) {
      await PermissionModel.create(permission);
      console.log(`‚úÖ ƒê√£ t·∫°o permission: ${permission.name} - ${permission.description}`);
    }
    
    console.log(`üéâ Ho√†n th√†nh! ƒê√£ t·∫°o ${defaultPermissions.length} permissions m·ªõi`);
    console.log('üìã Danh s√°ch permissions m·ªõi:');
    defaultPermissions.forEach((permission, index) => {
      console.log(`${index + 1}. ${permission.name} - ${permission.description}`);
    });
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå L·ªói khi reset permissions:', error);
    process.exit(1);
  }
};

resetPermissions();
